# generate global variables

function add_global(type, name)
{
  if (match(name, /^\*/))
    global[substr(name, 2)] = type "*"
  else
    global[name] = type
}

BEGIN {
  FS="[ \t=;]"
  print "/* This file is automatically generated with \"make global\". DO NOT EDIT */"
  print ""
}

/^static|^extern|^typedef/ {
  next;
}

!/^[A-Za-z][A-Za-z0-9_]* / {
  next;
}

/^struct [a-z_*]+ [a-zA-Z_*]+[ \t]*([=;]|$)/ {
  add_global("struct " $2, $3)
  next
}

/^struct/ {
  next
}

/^unsigned [a-z_*]+ [a-zA-Z_*]+[ \t]*([=;]|$)/ {
  add_global("unsigned " $2, $3)
  next
}

/^[a-z*]+ [a-zA-Z_*]+[ \t]*([=;\[]|$)/ {
  if (split($2, a, "[") == 1)
    add_global($1,a[1])
  else if (!match(a[1], /^\*/))
    add_global($1 "[" a[2],a[1]);
  next
}

#/^[a-z]+ [a-zA-Z_]+[ \t]*$/ {
#  add_global($1,$2)
#  next
#}

END {
  for (name in global)
  {
    type = global[name]
    if (match(type, /\]$/))
    {
      split(type, a, /\[|\]/)
      printf "extern %s %s;\n", a[1], name "[" a[2] "]"
    }
    else
      printf "extern %s %s;\n", type, name
  }

  print ""

  print "const struct var_info_t global_var_info[] = {"
  first = 1
  for (name in global)
  {
    type = global[name]

    if (type == "char*")
      printf "{ &%s, 1, 0 },\n", name
    else if (match(type, /\*$/))
      printf "{ &%s, 1, sizeof(*%s) },\n", name, name
    else if (match(type, /\]$/))
      printf "{ &%s, 0, sizeof(%s) },\n", name, name
    else
      printf "{ &%s, 0, sizeof(%s) },\n", name, name
  }
  print "{ NULL, 0, 0 }"
  print " };"
}
